// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chirps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
insert into chirps (id, created_at, updated_at, body, user_id)
values (
    gen_random_uuid(),
    now(),
    now(),
    $1, 
    $2
)
returning id, created_at, updated_at, body, user_id
`

type CreateChirpParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const deleteChirp = `-- name: DeleteChirp :exec
delete from chirps where user_id = $1
`

func (q *Queries) DeleteChirp(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChirp, userID)
	return err
}

const deleteChirpByID = `-- name: DeleteChirpByID :exec
delete from chirps where id = $1 and user_id = $2
`

type DeleteChirpByIDParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteChirpByID(ctx context.Context, arg DeleteChirpByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteChirpByID, arg.ID, arg.UserID)
	return err
}

const getChirps = `-- name: GetChirps :many
select id, created_at, updated_at, body, user_id from chirps order by created_at ASC
`

func (q *Queries) GetChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpsByUser = `-- name: GetChirpsByUser :many
select id, created_at, updated_at, body, user_id from chirps where user_id= $1 order by created_at ASC
`

func (q *Queries) GetChirpsByUser(ctx context.Context, userID uuid.UUID) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirpsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSingleChirp = `-- name: GetSingleChirp :one
select id, created_at, updated_at, body, user_id from chirps where id = $1
`

func (q *Queries) GetSingleChirp(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getSingleChirp, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getSingleChirpByIDandUser = `-- name: GetSingleChirpByIDandUser :one
select id, created_at, updated_at, body, user_id from chirps where id = $1 and user_id = $2
`

type GetSingleChirpByIDandUserParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetSingleChirpByIDandUser(ctx context.Context, arg GetSingleChirpByIDandUserParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getSingleChirpByIDandUser, arg.ID, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}
