// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refreshtoken.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
insert into refresh_tokens (token, created_at, updated_at, user_id, expires_at)
values (
    $1,
    now(),
    now(),
    $2,
    $3
)
returning token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserRefreshToken = `-- name: GetUserRefreshToken :one
select users.id, users.created_at, users.updated_at, users.email, users.hashed_password, users.is_chirpy_red from users 
join refresh_tokens on users.id = refresh_tokens.user_id 
where refresh_tokens.token = $1 
AND revoked_at IS NULL 
AND expires_at > NOW()
`

func (q *Queries) GetUserRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
update refresh_tokens set updated_at = now(), revoked_at = now() where token = $1 returning token, created_at, updated_at, user_id, expires_at, revoked_at
`

func (q *Queries) UpdateRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, updateRefreshToken, token)
	return err
}
